name: Simple CI

on:
  workflow_dispatch:

jobs:
  ui-tests:
    timeout-minutes: 89
    runs-on: macos-latest

    env:
      PROJECT_NAME: "Embrace Ecommerce"

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Cache DerivedData
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.xcodeproj/project.pbxproj') }}-${{ hashFiles('**/Package.resolved', '**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-deriveddata-${{ hashFiles('**/*.xcodeproj/project.pbxproj') }}-
          ${{ runner.os }}-deriveddata-

    - name: Set up Xcode
      run: |
        echo "üîß Setting up Xcode..."
        sudo xcode-select --print-path
        echo "‚úÖ Using Xcode at: $(xcode-select --print-path)"
        sudo xcodebuild -license accept 2>/dev/null || echo "License already accepted"
    - name: Inject APP_ID
      run: |
        echo "üîß Injecting APP_ID into code..."
        if [[ -n "${{ vars.APP_ID }}" ]]; then
          echo "‚úÖ APP_ID found: ${{ vars.APP_ID }}"
          sed -i.bak "s/static let appId = \".*\"/static let appId = \"${{ vars.APP_ID }}\"/g" "${{ env.PROJECT_NAME }}/Services/SDKConfiguration.swift"
          echo "‚úÖ APP_ID injected successfully"
        else
          echo "‚ùå ERROR: APP_ID not found in repository variables"
          exit 1
        fi

    - name: Prepare Simulator
      run: |
        echo "üì± Preparing iOS Simulator..."

        # Kill any existing simulators
        killall Simulator 2>/dev/null || true
        xcrun simctl shutdown all 2>/dev/null || true

        # List available devices
        xcrun simctl list devices available

        # Get the simulator UDID for iPhone 16 Pro
        SIMULATOR_UDID=$(xcrun simctl list devices available | grep "iPhone 16 Pro (" | grep -v "Clone" | head -1 | grep -o -E "\(([0-9A-F-]+)\)" | tr -d '()')

        if [[ -z "$SIMULATOR_UDID" ]]; then
          echo "‚ùå iPhone 16 Pro simulator not found"
          exit 1
        fi

        echo "‚úÖ Found simulator: $SIMULATOR_UDID"

        # Boot the simulator
        echo "üöÄ Booting simulator..."
        xcrun simctl boot "$SIMULATOR_UDID" || true

        # Wait for simulator to boot
        echo "‚è≥ Waiting for simulator to be ready..."
        xcrun simctl bootstatus "$SIMULATOR_UDID" -b

        echo "‚úÖ Simulator is ready"

    - name: Run UI Tests
      run: |
        echo "üß™ Running UI tests..."
        xcodebuild test \
          -scheme "${{ env.PROJECT_NAME }}" \
          -destination "platform=iOS Simulator,name=iPhone 16 Pro" \
          -only-testing:"${{ env.PROJECT_NAME }}UITests/Embrace_EcommerceUITests/testAuthenticationGuestFlow" \
          -parallel-testing-enabled NO \
          -allowProvisioningUpdates \
          -skipMacroValidation
        echo "‚úÖ UI tests completed successfully"
