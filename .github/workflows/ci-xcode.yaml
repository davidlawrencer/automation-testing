name: Xcode - CI

# Note: This CI/CD function is optimized to pull as much activity as possible out of a single action. It might not be optimized for your use case.

on:
  workflow_dispatch:

jobs:
  ui-tests:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure App with Repository Variables
      run: |
        echo "🔧 Configuring app with repository variables..."
        # Check if APP_ID variable exists
        if [[ -n "${{ vars.APP_ID }}" ]]; then
          echo "✅ APP_ID found in repository variables: ${{ vars.APP_ID }}"
          # Update the appId in Embrace_EcommerceApp.swift
          echo "📝 Updating appId in Embrace_EcommerceApp.swift..."
          # Use sed to replace the line containing 'appId: SDKConfiguration.Embrace.appId'
          sed -i '' 's/appId: SDKConfiguration\.Embrace\.appId/appId: "${{ vars.APP_ID }}"/g' "Embrace Ecommerce/Embrace_EcommerceApp.swift"
          echo "✅ Updated appId to use repository variable"
          # Show the updated line for verification
          echo "📋 Updated line:"
          grep -n "appId:" "Embrace Ecommerce/Embrace_EcommerceApp.swift" || echo "⚠️ Could not find appId line"
        else
          echo "❌ ERROR: APP_ID variable not found in repository variables"
          echo "   Please add APP_ID as a repository variable before running this workflow."
          echo "   Go to Settings → Secrets and variables → Actions → Variables tab"
          exit 1
        fi
        echo ""

    - name: Set up Xcode
      run: |
        sudo xcode-select --print-path

    - name: Environment Information
      run: |
        echo "🔧 ENVIRONMENT INFORMATION"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🖥️  Runner OS: ${{ runner.os }}"
        echo "📅 Date: $(date)"
        echo "🛠️  Xcode Version: $(xcodebuild -version | head -1)"
        echo "📱 Available SDK versions:"
        xcodebuild -showsdks | grep iOS || echo "No iOS SDKs found"
        echo "🔍 Simulator runtimes:"
        xcrun simctl list runtimes | grep iOS || echo "No iOS runtimes found"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo ""

    - name: Cache derived data and Swift packages
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-xcode-cache-${{ hashFiles('**/*.xcodeproj/project.pbxproj', '**/*.swift', '**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-xcode-cache-

    - name: Resolve Swift Package dependencies
      run: |
        echo "📦 Resolving Swift Package dependencies..."
        xcodebuild -resolvePackageDependencies \
          -scheme "Embrace Ecommerce" || {
          echo "❌ ERROR: Failed to resolve Swift Package dependencies"
          exit 1
        }
        echo "✅ Swift Package dependencies resolved"
        echo ""

    - name: Build for testing (once for all devices)
      run: |
        echo "🔍 Discovering available destinations for building..."

        # Show all available destinations first
        echo "📱 All available destinations:"
        xcodebuild -showdestinations -scheme "Embrace Ecommerce" || {
          echo "❌ ERROR: Failed to get destinations for scheme 'Embrace Ecommerce'"
          echo "Available schemes:"
          xcodebuild -list
          exit 1
        }

        echo ""
        echo "🎯 Filtering for iOS Simulator destinations..."

        # Get any available iOS simulator for building
        echo "🔍 Searching for available simulators..."
        available_destinations=$(xcodebuild -showdestinations -scheme "Embrace Ecommerce" | grep "platform:iOS Simulator")
        echo "Raw destinations found:"
        echo "$available_destinations"
        echo ""

        # Extract a simple iPhone simulator destination
        selected_line=$(echo "$available_destinations" | \
          grep -E "platform:iOS Simulator.*name:iPhone" | \
          head -1)

        if [[ -n "$selected_line" ]]; then
          # Extract each field independently regardless of order
          device_name=$(echo "$selected_line" | sed -n 's/.*name:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          os_version=$(echo "$selected_line" | sed -n 's/.*OS:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          platform=$(echo "$selected_line" | sed -n 's/.*platform:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Construct the destination string
          build_destination="platform=${platform},name=${device_name},OS=${os_version}"

          echo "🔍 Parsed fields:"
          echo "  Platform: '$platform'"
          echo "  Device: '$device_name'"
          echo "  OS: '$os_version'"
        else
          build_destination=""
        fi

        if [[ -z "$build_destination" ]] || [[ "$build_destination" == *"platform="* && "$build_destination" != *"name="* ]]; then
          echo "❌ ERROR: Failed to parse simulator destination"
          echo "No suitable iOS simulator destination found for building"
          exit 1
        fi

        echo "✅ Selected build destination: $build_destination"
        echo ""

        echo "🔨 Starting build-for-testing..."
        echo "Command: xcodebuild build-for-testing -scheme 'Embrace Ecommerce' -destination '$build_destination'"
        echo ""

        xcodebuild build-for-testing \
          -scheme "Embrace Ecommerce" \
          -destination "$build_destination" || {
          echo "❌ ERROR: Build failed!"
          exit 1
        }

        echo "✅ Build completed successfully"

    - name: Clone simulators for parallel testing
      run: |
        echo "📱 Cloning simulators for parallel testing..."
        echo ""

        # Get base devices to clone (filter for iOS 26.0 to match deployment target)
        echo "🔍 Finding base devices with iOS 26.0..."
        base_devices=$(xcodebuild -showdestinations -scheme "Embrace Ecommerce" | \
          grep "platform:iOS Simulator" | \
          grep "OS:26.0" | \
          grep -E "(iPhone 17|iPad Pro|iPad Air)" | \
          head -5)

        if [[ -z "$base_devices" ]]; then
          echo "❌ ERROR: No iOS 26.0 simulators found for cloning"
          exit 1
        fi

        echo "📋 Base devices found:"
        echo "$base_devices"
        echo ""

        # Create clones (5 per device)
        clones_per_device=5
        clone_count=0

        echo "$base_devices" | while IFS= read -r line; do
          # Extract device name and UDID
          device_name=$(echo "$line" | sed -n 's/.*name:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          device_udid=$(echo "$line" | sed -n 's/.*id:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          if [[ -n "$device_name" ]] && [[ -n "$device_udid" ]]; then
            echo "🔄 Cloning $device_name ($device_udid)..."

            for i in $(seq 1 $clones_per_device); do
              clone_name="Clone $i of $device_name"
              echo "  Creating: $clone_name"
              xcrun simctl clone "$device_udid" "$clone_name" || {
                echo "  ⚠️ Warning: Failed to create clone $i"
              }
              clone_count=$((clone_count + 1))
            done
            echo ""
          fi
        done

        echo "✅ Created $clone_count simulator clones"
        echo ""

    - name: Run UI Tests in parallel on multiple devices
      run: |
        echo "🧪 Starting parallel UI Test execution..."
        echo ""

        # Get all available iOS 26.0 devices (including clones)
        echo "🔍 Discovering all iOS 26.0 simulator devices..."
        xcodebuild -showdestinations -scheme "Embrace Ecommerce" | \
          grep "platform:iOS Simulator" | \
          grep "OS:26.0" | \
          grep -E "(iPhone|iPad)" | \
          grep -v "Any iOS Simulator Device" > /tmp/device_destinations.txt || {
          echo "❌ ERROR: Failed to get device destinations"
          exit 1
        }

        # Extract device info
        echo "🔄 Processing device information..."
        > /tmp/device_list.txt
        while IFS= read -r line; do
          device_name=$(echo "$line" | sed -n 's/.*name:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          os_version=$(echo "$line" | sed -n 's/.*OS:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          device_udid=$(echo "$line" | sed -n 's/.*id:\([^,}]*\).*/\1/p' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          if [[ -n "$device_name" ]] && [[ -n "$os_version" ]] && [[ "$device_name" =~ ^(iPhone|iPad|Clone) ]]; then
            echo "$device_name|$os_version|$device_udid" >> /tmp/device_list.txt
          fi
        done < /tmp/device_destinations.txt

        device_count=$(wc -l < /tmp/device_list.txt | tr -d ' ')
        echo "✅ Found $device_count devices (including clones)"
        echo ""

        if [[ $device_count -eq 0 ]]; then
          echo "❌ ERROR: No valid iOS 26.0 simulator devices found!"
          exit 1
        fi

        # Show devices
        echo "📱 Devices to test:"
        cat /tmp/device_list.txt | while IFS='|' read -r device os udid; do
          echo "  ✓ $device (OS: $os)"
        done
        echo ""

        # Launch tests in parallel (up to 25 devices: 5 base × 5 clones)
        max_parallel=25
        actual_test_count=$(( device_count < max_parallel ? device_count : max_parallel ))
        echo "🚀 Launching $actual_test_count parallel test runs..."
        echo ""

        # Create log directory
        mkdir -p /tmp/test-logs

        # Launch all tests in background
        declare -a pids
        declare -a device_names
        test_num=0

        cat /tmp/device_list.txt | head -$max_parallel | while IFS='|' read -r device os_version udid; do
          test_num=$((test_num + 1))

          # Sanitize device name for file path
          safe_device_name=$(echo "$device" | sed 's/ /-/g' | sed 's/[^a-zA-Z0-9-]//g')
          log_file="/tmp/test-logs/test-${test_num}-${safe_device_name}.log"

          destination="platform=iOS Simulator,name=$device,OS=$os_version"

          echo "[$test_num/$actual_test_count] Starting: $device"

          # Launch test in background
          xcodebuild test-without-building \
            -scheme "Embrace Ecommerce" \
            -destination "$destination" \
            -only-testing:"Embrace EcommerceUITests" \
            > "$log_file" 2>&1 &

          pids+=($!)
          device_names+=("$device")
        done

        echo ""
        echo "⏳ Waiting for all tests to complete..."
        echo ""

        # Wait for all background processes
        failed_count=0
        passed_count=0

        for i in "${!pids[@]}"; do
          pid=${pids[$i]}
          device=${device_names[$i]}

          if wait $pid; then
            echo "✅ PASSED: $device"
            passed_count=$((passed_count + 1))
          else
            echo "❌ FAILED: $device"
            failed_count=$((failed_count + 1))
          fi
        done

        echo ""
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📊 FINAL RESULTS"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🔢 Total devices found: $device_count"
        echo "🧪 Tests launched in parallel: $actual_test_count"
        echo "✅ Passed: $passed_count"
        echo "❌ Failed: $failed_count"
        echo ""

        # Show logs location
        echo "📋 Test logs available in: /tmp/test-logs/"
        echo ""

        if [[ $passed_count -gt 0 ]]; then
          echo "🎉 SUCCESS: $passed_count device(s) passed tests"
        else
          echo "💥 FAILURE: No devices passed tests"
          exit 1
        fi
